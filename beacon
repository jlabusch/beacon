#!/bin/bash

# Copyright (C) 2019 Jacques Labuschagne.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/gpl.txt

BEACON_ID=e0fb0955a
BEACON_DOMAIN=example.com
TUNNEL_HOST=tunnel.example.com
SSH_KEY=${HOME}/.ssh/id_rsa
INTERACTIVE=N
# Don't define SSH_USER and CMD_USER yet


# Help text formatting variables:
H_TT="\""
H_TT_b=""

if [ -n "${MARKDOWN}" ]; then
    H_TT='`'
    H_TT_b='`'
fi

read -r -d "" HELPTEXT << EOF
NAME
    ${H_TT_b}beacon${H_TT_b} - Consult a DNS beacon and maybe create a reverse tunnel to a control node

SYNOPSIS
    beacon [-h] [-i beacon_id] [-d beacon_domain] [-t tunnel_host] [-u user]
           [-k ssh_key] [-s ssh_user] [--install] [--interactive]

DESCRIPTION
    ${H_TT_b}beacon${H_TT_b} tells individual worker nodes in a fleet to create reverse SSH tunnels to
    a central tunnel host when they see a particular signal appear in a DNS beacon.

        +--------+     +--------+
        | worker |     | NAT    +---------+
        | node   +-----> gateway|         |
        +--------+     +--------+         |
                                    +-----v-------+      +--------------+
                                    |             |      |              |
                                    | tunnel host <------+ support team |
                                    |             |      |              |
                                    +-----^-------+      +--------------+
        +--------+     +--------+         |
        | worker |     | NAT    +---------+
        | node   +-----> gateway|
        +--------+     +--------+

    On the DNS server for ${H_TT}beacon-domain${H_TT}, create a TXT record for
    ${H_TT}<beacon-id>.<beacon-domain>${H_TT} with the value of the port the reverse SSH
    tunnel should be created on (${H_TT}52001${H_TT} below):

        > dig +noall +answer -t TXT my_id.my_domain.com
        my_id.my_domain.com. 592 IN TXT "52001"

    On the worker node, run this script in a cron job and it'll connect if it sees
    the beacon, and skip processing if the tunnel is already up. (See INSTALLATION
    section for more.)

        > grep beacon /etc/crontab
        */5 * * * *    my_user    /usr/local/bin/beacon -i my_id [...]

    The worker node's SSH user must be able to log in to the tunnel host non-
    interactively, as though by:

        > ssh -i \$HOME/.ssh/id_rsa -l my_user tunnel_host.my_domain.com

    On the tunnel host, you can find open tunnels in the 52xxx port range using:

        > sudo netstat -tpln | grep ssh | grep -E ':52[0-9]{3}'
        tcp   0   0 127.0.0.1:52001    0.0.0.0:*    LISTEN    31459/sshd: my_user
        tcp6  0   0 ::1:52001          :::*         LISTEN    31459/sshd: my_user

    You can then connect to the worker node from the tunnel host using:

        > ssh localhost -p 52001

    You can close tunnels from the tunnel host end by killing specific sshd processes:

        > kill 31459 # PID from the example above

PROXYING WEB APPLICATIONS
    Shells are nice, but sometimes you want to be able to see a web interface.

    Here's how we did it:

        # on tunnel host, create a SOCKS proxy from local port
        # 51800 (chosen randomly) to the worker node on 52001
        > ssh -D 51800 -N -p 52001 localhost

        # on your workstation, create an SSH tunnel to the SOCKS proxy
        > ssh -N -L 51800:localhost:51800 tunnel_host.mydomain.com

        # Now tell your browser to use the local proxy
        curl -x socks5://localhost:51800 \$REMOTE_URI

    Browsers can be a bit funny about SOCKS5 proxies, and if you're using
    Firefox I'd immediately recommend using something like FoxyProxy. YMMV.

INSTALLATION
    The easiest way to install beacon is with the interactive installer:

        curl -s https://raw.githubusercontent.com/jlabusch/beacon/v1.0.6/webinstall | sudo bash

    The installer will create ${H_TT_b}/usr/local/bin/beacon${H_TT_b}, prompt for configuration and
    add the job to ${H_TT_b}/etc/crontab${H_TT_b}.

    If you already have beacon installed and know what options you want to run with,
    you can add or update the cron job by appending the ${H_TT}--install${H_TT} option to your
    usual invocation, e.g.

        > sudo beacon -i my_id -d my_domain.com [...] --install

USAGE
    List of optional arguments:

        --beacon-domain=DOMAIN, -d
            A domain whose DNS records you can change

        --beacon-id=ID, -i
            The unique subdomain that this worker node should query

        --help, -h
            This message

        --install
            Install beacon into /etc/crontab, to be run in 5 minute intervals and
            taking additional command line options into account when configuring
            the job (-c, -d, -i, -k, -u, -t)

        --interactive
            Run interactively, i.e. without putting the tunnel in a detached screen
            session (ignored with --install). This is usually only needed for debugging,
            e.g. figuring out that your SSH key is prompting for a passphrase.

        --ssh-key=PATH, -k
            Default is "\$HOME/.ssh/id_rsa"

        --ssh-user=USER, -s
            Default is "\$USER"

        --tunnel-host=HOST, -t
            A host you can land the reverse tunnels on.

        --user=USER, -u
            User to execute the cron job as; default is "\$USER"

        --uninstall
            Remove beacon from the crontab but leave the actual script in place on
            the filesystem. Intentional quirk: it'll only uninstall the entry for
            the script you're running, i.e. "/foo/beacon" and "/bar/beacon" are not
            equivalent.

AUTHENTICATION
    The tunnels are built on SSH, and beacon does not attempt to manage your SSH keys
    for you. The only restriction on keys is that they should be non-interactive,
    e.g. not requiring that a passphrase be entered.

EOF

eval set -- "$(getopt -o hi:d:t:k:u:s: -l help,uninstall,install,webinstall,user:,beacon-id:,beacon-domain:,tunnel-host:,ssh-key:,ssh-user:,interactive -n beacon -- $@)"

while true; do
    case "$1" in
        -i|--beacon-id)
            BEACON_ID=$2
            shift 2
            ;;
        --install)
            INSTALL=Y
            shift
            ;;
        --uninstall)
            UNINSTALL=Y
            shift
            ;;
        --webinstall)
            WEBINSTALL=Y
            shift
            ;;
        --interactive)
            INTERACTIVE=Y
            shift
            ;;
        -d|--beacon-domain)
            BEACON_DOMAIN=$2
            shift 2
            ;;
        -t|--tunnel-host)
            TUNNEL_HOST=$2
            shift 2
            ;;
        -k|--ssh-key)
            SSH_KEY=$2
            shift 2
            ;;
        -s|--ssh-user)
            SSH_USER=$2
            shift 2
            ;;
        -u|--user)
            CMD_USER=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "$HELPTEXT" | less
            exit 0
            ;;
    esac
done

function get_port_from_dns(){
    PORT=$(dig +noall +answer -t TXT ${BEACON_ID}.${BEACON_DOMAIN} | cut -d\" -f2)
}

function run_beacon(){
    if [ "${INTERACTIVE}" = "Y" ]; then
        # Turning off strict host key checking is bad; we only do it
        # because the very first connection can't capture user input.
        ssh -o "StrictHostKeyChecking no" -i ${SSH_KEY} -R ${PORT}:localhost:22 -N -T -l ${SSH_USER:-${USER}} ${TUNNEL_HOST}
    else
        screen -d -m -S beacon \
        ssh -o "StrictHostKeyChecking no" -i ${SSH_KEY} -R ${PORT}:localhost:22 -N -T -l ${SSH_USER:-${USER}} ${TUNNEL_HOST}
    fi
}

function uninstall_beacon(){
    local crontab="/etc/crontab"
    local fullpath=$(realpath $0)
    local escaped_path=$(echo "${fullpath}" | sed 's/\//\\\//g')

    if grep -q ${fullpath} ${crontab}; then
        echo "Removing ${fullpath} from ${crontab}"
        sed -i "s/.*$escaped_path.*//g" ${crontab}
    fi
}

function webinstall(){
    # webinstall is probably a curl|bash situation which means STDIN is a
    # pipe and we can't gather interactive input.
    # This hack will fail if STDERR has been redirected somewhere else, but
    # life is full of disappointments.
    exec 0<$(realpath /proc/self/fd/2)

    read -p "  [config] Beacon ID - " ID
    if [ -n "${ID}" ]; then BEACON_ID="${ID}"; fi

    read -p "  [config] Beacon domain (default ${BEACON_DOMAIN}) - " DOMAIN
    if [ -n "${DOMAIN}" ]; then BEACON_DOMAIN="${DOMAIN}"; fi

    read -p "  [config] Beacon cron job username (default ${CMD_USER:-${USER}}) - " CU
    if [ -n "${CU}" ]; then CMD_USER="${CU}"; fi

    read -p "  [config] SSH key (default ${SSH_KEY}) - " SK
    if [ -n "${SK}" ]; then SSH_KEY="${SK}"; fi

    read -p "  [config] SSH user (default same as cron user) - " SU
    if [ -n "${SU}" ]; then SSH_USER="${SU}"; fi

    read -p "  [config] Tunnel host name (default ${TUNNEL_HOST}) - " TH
    if [ -n "${TH}" ]; then TUNNEL_HOST="${TH}"; fi

    if [ -z "${ID}" ]; then
        # It's weird they didn't enter a unique ID. Are we really capturing
        # interactive input?
        read -p "> Enter Y to complete installation: " CONT
        if [ "${CONT}" != "Y" ]; then
            if [ -z "${CONT}" ]; then
                echo "Couldn't gather config input; please try running \"beacon --install\" manually."
            fi
            echo "> Aborting"
            exit 1
        fi
    fi

    install_beacon
}

function install_beacon(){
    local crontab="/etc/crontab"
    local fullpath=$(realpath $0)
    local escaped_path=$(echo "${fullpath}" | sed 's/\//\\\//g')

    echo "Installing ${fullpath} in ${crontab}"

    touch ${crontab} || exit 1

    if grep -q ${fullpath} ${crontab}; then
        echo "Removing old entries..."
        sed -i "s/.*$escaped_path.*//g" ${crontab}
    fi

    echo -e "*/5 * * * *    ${CMD_USER:-${USER}}    ${fullpath} -d ${BEACON_DOMAIN} -i ${BEACON_ID} -k $(realpath ${SSH_KEY}) -s ${SSH_USER:-${CMD_USER:-${USER}}} -t ${TUNNEL_HOST}" >> ${crontab}
}

if [ -n "${UNINSTALL}" ]; then
    uninstall_beacon
elif [ -n "${WEBINSTALL}" ]; then
    webinstall
elif [ -n "${INSTALL}" ]; then
    install_beacon
else
    get_port_from_dns
    if screen -list beacon >/dev/null; then
        if [ -z "${PORT}" ]; then
            echo "Tunnel DNS beacon no longer present; closing" >&2
            kill $(pidof ssh)
        else
            echo "Tunnel already running" >&2
        fi
    else
        if [ -n "${PORT}" ] && [ ${PORT} -gt 52000 ]; then
            run_beacon
        fi
    fi
fi

