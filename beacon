#!/bin/bash

# Copyright (C) 2019 Jacques Labuschagne.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/gpl.txt

BEACON_ID=e0fb0955a
BEACON_DOMAIN=example.com
TUNNEL_HOST=tunnel.example.com
SSH_KEY=${HOME}/.ssh/id_rsa
INTERACTIVE=N
# Don't define SSH_USER and CMD_USER yet

read -r -d "" HELPTEXT << EOF
NAME
    beacon - Consult a DNS beacon and maybe create a reverse tunnel to a control node

SYNOPSIS
    beacon [-h] [-i beacon_id] [-d beacon_domain] [-t tunnel_host] [-u user]
           [-k ssh_key] [-s ssh_user] [--install] [--interactive]

DESCRIPTION
    beacon tells individual nodes in a fleet to create reverse SSH tunnels to a central
    tunnel host when they see a particular signal appear in a DNS beacon.

        +-------+     +--------+
        | fleet |     | NAT    +---------+
        | node  +-----> gateway|         |
        +-------+     +--------+         |
                                   +-----v-------+      +--------------+
                                   |             |      |              |
                                   | tunnel host <------+ support team |
                                   |             |      |              |
                                   +-----^-------+      +--------------+
        +-------+     +--------+         |
        | fleet |     | NAT    +---------+
        | node  +-----> gateway|
        +-------+     +--------+

    On the DNS server for "${BEACON_DOMAIN}", create a TXT record for
    "${BEACON_ID}.${BEACON_DOMAIN}" with the value of the
    port the reverse SSH tunnel should be created on ("52001" below):

        > dig +noall +answer -t TXT ${BEACON_ID}.${BEACON_DOMAIN}
        ${BEACON_ID}.${BEACON_DOMAIN}. 592 IN TXT "52001"

    On the fleet node, run this script in a cron job and it'll connect if it sees
    the beacon, and skip processing if the tunnel is already up.

        > grep beacon /etc/crontab
        */5 *	* * *	${CMD_USER:-${USER}}    $(realpath $0)

    The fleet node's SSH user must be able to log in to the tunnel host non-interactively:

        > ssh -i ${SSH_KEY} -l ${SSH_USER:-${USER}} ${TUNNEL_HOST}

    On the tunnel host, you can find open tunnels in the 52xxx port range using:

        > sudo netstat -tpln | grep ssh | grep -E ':52[0-9]{3}'
        tcp    0    0 127.0.0.1:52001     0.0.0.0:*      LISTEN      31459/sshd: beaconuser
        tcp6   0    0 ::1:52001           :::*           LISTEN      31459/sshd: beaconuser

    On the tunnel host, you can close tunnels by killing specific sshd processes:

        > kill 31459

    List of optional arguments:

        --beacon-domain=DOMAIN, -d
            default is "${BEACON_DOMAIN}"

        --beacon-id=ID, -i
            default is "${BEACON_ID}"

        --help, -h
            show this message

        --install
            install beacon into /etc/crontab, to be run as ${CMD_USER:-${USER}} in 5 minute
            intervals and taking additional command line options into account when
            configuring the job (-c, -d, -i, -k, -u, -t)

        --interactive
            run interactively, i.e. without putting the tunnel in a detached screen session
            (ignored with --install)

        --ssh-key=PATH, -k
            default is "${SSH_KEY}"

        --ssh-user=USER, -s
            default is "${SSH_USER:-${USER}}"

        --tunnel-host=HOST, -t
            default is "${TUNNEL_HOST}"

        --user=USER, -u
            user to execute the cron job as; default is "${CMD_USER:-${USER}}"

AUTHENTICATION
    The tunnels are built on SSH, and beacon does not attempt to manage your SSH keys for you.
    The only restriction on keys is that they should be non-interactive, e.g. not requiring
    that a passphrase be entered.

EOF

eval set -- "$(getopt -o hi:d:t:k:u:s: -l help,install,user:,beacon-id:,beacon-domain:,tunnel-host:,ssh-key:,ssh-user:,interactive -n beacon -- $@)"

while true; do
    case "$1" in
        -i|--beacon-id)
            BEACON_ID=$2
            shift 2
            ;;
        --install)
            INSTALL=Y
            shift
            ;;
        --interactive)
            INTERACTIVE=Y
            shift
            ;;
        -d|--beacon-domain)
            BEACON_DOMAIN=$2
            shift 2
            ;;
        -t|--tunnel-host)
            TUNNEL_HOST=$2
            shift 2
            ;;
        -k|--ssh-key)
            SSH_KEY=$2
            shift 2
            ;;
        -s|--ssh-user)
            SSH_USER=$2
            shift 2
            ;;
        -u|--user)
            CMD_USER=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "$HELPTEXT" | less
            exit 0
            ;;
    esac
done

function run_beacon(){
    PORT=$(dig +noall +answer -t TXT ${BEACON_ID}.${BEACON_DOMAIN} | cut -d\" -f2)

    if [ -n "${PORT}" ] && [ ${PORT} -gt 52000 ]; then
        if [ "${INTERACTIVE}" = "Y" ]; then
            screen -d -m -S beacon \
            ssh -i ${SSH_KEY} -R ${PORT}:localhost:22 -N -T -l ${SSH_USER:-${USER}} ${TUNNEL_HOST}
        else
            ssh -i ${SSH_KEY} -R ${PORT}:localhost:22 -N -T -l ${SSH_USER:-${USER}} ${TUNNEL_HOST}
        fi
    fi
}

function install_beacon(){
    local crontab="/etc/crontab"
    local fullpath=$(realpath $0)
    local escaped_path=$(echo "${fullpath}" | sed 's/\//\\\//g')

    echo "Installing ${fullpath} in ${crontab}"

    touch ${crontab} || exit 1

    if grep -q ${fullpath} ${crontab}; then
        echo "Removing old entries..."
        sed -i "s/.*$escaped_path.*//g" ${crontab}
    fi

    echo -e "*/5 * * * *    ${CMD_USER:-${USER}}    ${fullpath} -d ${BEACON_DOMAIN} -i ${BEACON_ID} -k $(realpath ${SSH_KEY}) -s ${SSH_USER:-${CMD_USER:-${USER}}} -t ${TUNNEL_HOST}" >> ${crontab}
}

if [ -n "${INSTALL}" ]; then
    install_beacon
else
    if screen -list beacon >/dev/null; then
        echo "Tunnel already running" >&2
    else
        run_beacon
    fi
fi

